From d8427888befacfe9c425c3a8c8ef128306fbf78f Mon Sep 17 00:00:00 2001
From: BuddyZhang1 <buddy.d.zhang@gmail.com>
Date: Sun, 11 Mar 2018 22:28:32 +0800
Subject: [PATCH] Read: system call mechanism for read on kernel

---
 include/linux/sys.h                     |  6 ++++
 include/test/syscall.h                  |  7 +++++
 include/unistd.h                        |  6 ++++
 tools/testcase/systemcall/Kconfig       |  2 ++
 tools/testcase/systemcall/Makefile      |  1 +
 tools/testcase/systemcall/common.c      |  4 +++
 tools/testcase/systemcall/lib/Makefile  |  1 +
 tools/testcase/systemcall/lib/d_read.c  | 13 +++++++++
 tools/testcase/systemcall/read/Kconfig  | 21 ++++++++++++++
 tools/testcase/systemcall/read/Makefile |  2 ++
 tools/testcase/systemcall/read/common.c | 19 ++++++++++++
 tools/testcase/systemcall/read/read.c   | 51 +++++++++++++++++++++++++++++++++
 12 files changed, 133 insertions(+)
 create mode 100644 tools/testcase/systemcall/lib/d_read.c
 create mode 100644 tools/testcase/systemcall/read/Kconfig
 create mode 100644 tools/testcase/systemcall/read/Makefile
 create mode 100644 tools/testcase/systemcall/read/common.c
 create mode 100644 tools/testcase/systemcall/read/read.c

diff --git a/include/linux/sys.h b/include/linux/sys.h
index 7463945..e467043 100644
--- a/include/linux/sys.h
+++ b/include/linux/sys.h
@@ -76,6 +76,9 @@ extern int sys_d_open(void);
 #ifdef CONFIG_DEBUG_SYSCALL_CLOSE0
 extern int sys_d_close(void); 
 #endif
+#ifdef CONFIG_DEBUG_SYSCALL_READ0
+extern int sys_d_read(void); 
+#endif
 
 fn_ptr sys_call_table[] = {
 sys_setup, /* system setup */
@@ -156,4 +159,7 @@ sys_d_open,  /* Open file/directory */
 #ifdef CONFIG_DEBUG_SYSCALL_CLOSE0
 sys_d_close,  /* Close file/directory */
 #endif
+#ifdef CONFIG_DEBUG_SYSCALL_READ0
+sys_d_read,  /* Read data from file/directory */
+#endif
 };
diff --git a/include/test/syscall.h b/include/test/syscall.h
index 0492e75..95c7a2b 100644
--- a/include/test/syscall.h
+++ b/include/test/syscall.h
@@ -31,6 +31,13 @@ extern int debug_syscall_close0(void);
 
 #endif // CONFIG_DEBUG_SYSCALL_OPEN
 
+#ifdef CONFIG_DEBUG_SYSCALL_READ
+extern int debug_syscall_read_common_userland(void);
+#ifdef CONFIG_DEBUG_SYSCALL_READ0
+extern int debug_syscall_read0(void);
+#endif
+#endif // CONFIG_DEBUG_SYSCALL_READ
+
 #endif // CONFIG_DEBUG_SYSCALL
 
 #endif
diff --git a/include/unistd.h b/include/unistd.h
index c642e82..4ba3161 100644
--- a/include/unistd.h
+++ b/include/unistd.h
@@ -88,6 +88,9 @@
 #ifdef CONFIG_DEBUG_SYSCALL_CLOSE0
 #define __NR_d_close  72
 #endif
+#ifdef CONFIG_DEBUG_SYSCALL_READ0
+#define __NR_d_read   72
+#endif
 
 #define _syscall0(type, name) \
 	type name(void) \
@@ -212,5 +215,8 @@ int d_open(const char *filename, int flag, ...);
 #ifdef CONFIG_DEBUG_SYSCALL_CLOSE0
 int d_close(int fildes);
 #endif
+#ifdef CONFIG_DEBUG_SYSCALL_READ0
+int d_read(int fildes, char *buf, off_t count);
+#endif
 
 #endif
diff --git a/tools/testcase/systemcall/Kconfig b/tools/testcase/systemcall/Kconfig
index 565151e..bfe0355 100644
--- a/tools/testcase/systemcall/Kconfig
+++ b/tools/testcase/systemcall/Kconfig
@@ -20,6 +20,8 @@ source tools/testcase/systemcall/open/Kconfig
 
 source tools/testcase/systemcall/close/Kconfig
 
+source tools/testcase/systemcall/read/Kconfig
+
 endif
 
 endmenu
diff --git a/tools/testcase/systemcall/Makefile b/tools/testcase/systemcall/Makefile
index e85ad46..9d4e272 100644
--- a/tools/testcase/systemcall/Makefile
+++ b/tools/testcase/systemcall/Makefile
@@ -2,3 +2,4 @@ obj-$(CONFIG_DEBUG_SYSCALL)                += common.o
 obj-$(CONFIG_DEBUG_SYSCALL_ROUTINE)        += system.o
 obj-$(CONFIG_DEBUG_SYSCALL_OPEN)           += open/
 obj-$(CONFIG_DEBUG_SYSCALL_CLOSE)          += close/
+obj-$(CONFIG_DEBUG_SYSCALL_READ)           += read/
diff --git a/tools/testcase/systemcall/common.c b/tools/testcase/systemcall/common.c
index 57f6810..e5e4213 100644
--- a/tools/testcase/systemcall/common.c
+++ b/tools/testcase/systemcall/common.c
@@ -55,5 +55,9 @@ int debug_syscall_common_userland(void)
     debug_syscall_close_common_userland();
 #endif
 
+#ifdef CONFIG_DEBUG_SYSCALL_READ
+    debug_syscall_read_common_userland();
+#endif
+
     return 0;
 }
diff --git a/tools/testcase/systemcall/lib/Makefile b/tools/testcase/systemcall/lib/Makefile
index 5b215f7..e41337a 100644
--- a/tools/testcase/systemcall/lib/Makefile
+++ b/tools/testcase/systemcall/lib/Makefile
@@ -1,2 +1,3 @@
 lib-$(CONFIG_DEBUG_SYSCALL_OPEN0)      += d_open.o
 lib-$(CONFIG_DEBUG_SYSCALL_CLOSE0)     += d_close.o
+lib-$(CONFIG_DEBUG_SYSCALL_READ0)      += d_read.o
diff --git a/tools/testcase/systemcall/lib/d_read.c b/tools/testcase/systemcall/lib/d_read.c
new file mode 100644
index 0000000..b2e6c79
--- /dev/null
+++ b/tools/testcase/systemcall/lib/d_read.c
@@ -0,0 +1,13 @@
+/*
+ * System Call: read
+ *
+ * (C) 2018.03 BiscuitOS <buddy.zhang@aliyun.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#define __LIBRARY__
+#include <unistd.h>
+
+_syscall3(int, d_read, int, fd, char *, buf, off_t, count)
diff --git a/tools/testcase/systemcall/read/Kconfig b/tools/testcase/systemcall/read/Kconfig
new file mode 100644
index 0000000..83d98a7
--- /dev/null
+++ b/tools/testcase/systemcall/read/Kconfig
@@ -0,0 +1,21 @@
+#
+# System Call: read
+#
+
+menu "Read(): Read data from a file/directory/socket/pipe etc"
+
+config DEBUG_SYSCALL_READ
+	bool "Read(): Read data from a file/directory/socket/pipe etc"
+	help
+	  Debug Read system Call Machanism on X86 Architecture.
+
+if DEBUG_SYSCALL_READ
+
+config DEBUG_SYSCALL_READ0
+	bool "System CALL: Read (linux0.11.1 MINIXFS)"
+	help
+	  READ system call on linux0.11.1.
+
+endif
+
+endmenu
diff --git a/tools/testcase/systemcall/read/Makefile b/tools/testcase/systemcall/read/Makefile
new file mode 100644
index 0000000..c3b6021
--- /dev/null
+++ b/tools/testcase/systemcall/read/Makefile
@@ -0,0 +1,2 @@
+obj-$(CONFIG_DEBUG_SYSCALL_READ)             += common.o
+obj-$(CONFIG_DEBUG_SYSCALL_READ0)            += read.o
diff --git a/tools/testcase/systemcall/read/common.c b/tools/testcase/systemcall/read/common.c
new file mode 100644
index 0000000..2ce1277
--- /dev/null
+++ b/tools/testcase/systemcall/read/common.c
@@ -0,0 +1,19 @@
+/*
+ * Common System Call: read
+ *
+ * (C) 2018.03 BiscuitOS <buddy.zhang@aliyun.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/kernel.h>
+#include <test/debug.h>
+
+int debug_syscall_read_common_userland(void)
+{
+#ifdef CONFIG_DEBUG_SYSCALL_READ0
+    debug_syscall_read0();
+#endif
+    return 0;
+}
diff --git a/tools/testcase/systemcall/read/read.c b/tools/testcase/systemcall/read/read.c
new file mode 100644
index 0000000..7502bd7
--- /dev/null
+++ b/tools/testcase/systemcall/read/read.c
@@ -0,0 +1,51 @@
+/*
+ * System Call: read
+ *
+ * (C) 2018.03 BiscuitOS <buddy.zhang@aliyun.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#define __LIBRARY__
+#include <unistd.h>
+
+#include <linux/kernel.h>
+#include <linux/sched.h>
+#include <linux/fs.h>
+
+#include <test/debug.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <errno.h>
+
+
+int sys_d_read(unsigned int fd, char *buf, int count)
+{
+    /* Main-routine: read */
+    printk("sys_d_read: Hello World\n");
+    return 0;
+}
+
+/* Invoke by system call: int $0x80 */
+int debug_syscall_read0(void)
+{
+    int fd;
+    char buff[20];
+
+    /* open a file */
+    fd = open("/etc/rc", O_RDONLY, 0);
+    if (!fd) {
+        d_printf("Can't open special file\n");
+        return -1;
+    }
+
+    /* Read data from file */
+    d_read(fd, buff, 10);
+    buff[10] = '\0';
+    d_printf("READ: %s\n", buff);
+
+    /* close fd */
+    close(fd);
+    return 0;
+}
-- 
2.7.4

