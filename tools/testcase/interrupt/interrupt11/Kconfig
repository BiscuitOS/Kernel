#
# Interrupt 11 - Segment Not Present (#NP)
#
menu "Interrupt 11 - Segment Not Present (#NP)"

config DEBUG_INTERRUPT11
        bool "Interrupt 11 - Segment Not Present (#NP)"
        help
	  Indicates that the present flag of a semgnet or gate 
	  descriptor is clear. The processor can generated this 
	  exception during any of the following operations:
	  * While attempting to load CS, DS, ES, FS, or GS registers.
	    [Detection of a not-present segment while loading the 
	    SS register causes a task fault exception (#SS) to be 
	    generated.] This situation can occur while performing a
	    task switch.
	  * While attempting to load the LDTR using an LDT instruction.
	    Detection of a not-present LDT while loading the LDTR
	    during a task switch operation causes an invalid-TSS
	    exception (#TS) to be generated.
	  * When executing the LTR instruction and the TSS is marked
	    not present.
	  * While attempting to use a gate descriptor or TSS that
	    is marked segment-not-present, but is otherwise valid.
	  An operating system typically uses tht segment-not-present
	  exception to implement virtual memory at the segment level.
	  If the exception handler loads the segment and returns, the
	  interrupted program or task resumes exception.
	  A not-present indication in a gate descriptor, however, does
	  not indicate that a segment is not present (because gates
	  do not correspond to segments). The operating system may use
	  the present flag for gate descriptors to trigger exceptions
	  of specical significance to the operating system.
	  A contributory exception or page fault that subsequently 
	  referenced a not-present segment would cause a double fault
	  (#DF) to be generated instead of #NP.

if DEBUG_INTERRUPT11

config DEBUG_SOFT_INT11
	bool "Trigger #NP by soft-interrupt 'int $0x0B'"
	help
	  Trigger #NP by soft interrupt 'int $0xB'

config DEBUG_INT11_LLDT
	bool "Trigger #NP when loadding no-present LDT descriptor"
	help
	  While attempting to load the LDTR using an LDT instruction.
          Detection of a not-present LDT while loading the LDTR
          during a task switch operation causes an invalid-TSS
          exception (#TS) to be generated.

config DEBUG_INT11_LTR
	bool "Trigger #NP when loadding no-present LTR descriptor"
	help
	  While attempting to load the TSS using an LTR instruction.
          Detection of a not-present LTR while loading the TSS
          during a task switch operation causes an invalid-TSS
          exception (#TS) to be generated.

config DEBUG_INT11_MOV_DS
	bool "Trigger #NP when moving no-present into DS"
	help
	  Moving a no-present segment selector into DS will generate
	  #NP.

config DEBUG_INT11_MOV_ES
	bool "Trigger #NP when moving no-present into ES"
	help
	  Moving a no-present segment selector into ES will generate
	  #NP.

config DEBUG_INT11_MOV_FS
	bool "Trigger #NP when moving no-present into FS"
	help
	  Moving a no-present segment selector into FS will generate
	  #NP.

config DEBUG_INT11_MOV_GS
	bool "Trigger #NP when moving no-present into GS"
	help
	  Moving a no-present segment selector into GS will generate
	  #NP.

config DEBUG_INT11_POP_DS
	bool "Trigger #NP when poping no-present into DS"
	help
	  Poping a no-present segment selector into DS will generate
	  #NP.

config DEBUG_INT11_POP_ES
	bool "Trigger #NP when poping no-present into ES"
	help
	  Poping a no-present segment selector into ES will generate
	  #NP.

config DEBUG_INT11_POP_FS
	bool "Trigger #NP when poping no-present into FS"
	help
	  Poping a no-present segment selector into FS will generate
	  #NP.

config DEBUG_INT11_POP_GS
	bool "Trigger #NP when poping no-present into GS"
	help
	  Poping a no-present segment selector into GS will generate
	  #NP.

endif # End of DEBUG_INTERRUPT

endmenu
